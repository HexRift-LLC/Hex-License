const { Client, EmbedBuilder } = require("discord.js");
const client = new Client({ intents: ["Guilds"] });
const yaml = require("yaml");
const fs = require("fs");
const path = require("path");
const configPath = path.join(__dirname, "../../config/config.yml");
const config = yaml.parse(fs.readFileSync(configPath, "utf8"));

client.login(config.discord.bot_token);

const sendLog = (type, data) => {
  const channel = client.channels.cache.get(config.discord.logChannelId);
  if (!channel) return;

  const embed = new EmbedBuilder()
    .setColor(config.discord.embedColor)
    .setTimestamp()
    .setThumbnail(config.discord.botIconUrl) // Fixed: Pass URL string directly
    .setFooter({ text: "Hex License", iconURL: config.discord.botIconUrl });

  switch (type) {
    case "license_created":
      embed
        .setTitle("🔑 License Created")
        .setDescription(`New license generated by ${data.username}`)
        .addFields([
          { name: "Product", value: data.product, inline: false },
          { name: "License Key", value: `||${data.key}||`, inline: false },
        ]);
      break;

    case "license_deleted":
      embed
        .setTitle("🗑️ License Deleted")
        .setDescription(`License deleted by ${data.username}`)
        .addFields([
          { name: "License Key", value: `||${data.key}||`, inline: false },
        ]);
      break;

    case "license_toggled":
      embed
        .setTitle(
          data.status === "activated"
            ? "✅ License Activated"
            : "❌ License Deactivated"
        )
        .setDescription(`License ${data.status} by ${data.username}`)
        .addFields([
          { name: "License Key", value: `||${data.key}||`, inline: false },
        ]);
      break;

    case "hwid_reset":
      embed
        .setTitle("🔄 HWID Reset")
        .setDescription(`HWID reset performed by ${data.username}`)
        .addFields([
          { name: "License Key", value: `||${data.key}||`, inline: false },
          {
            name: "Previous HWID",
            value: data.oldHwid || "None",
            inline: true,
          },
        ]);
      break;

    case "user_banned":
      embed
        .setTitle("🚫 User Banned")
        .setDescription(`User banned by ${data.staffMember}`)
        .addFields([
          { name: "User", value: data.username, inline: false },
          { name: "Reason", value: data.reason, inline: false },
        ]);
      break;

    case "user_unbanned":
      embed
        .setTitle("🔓 User Unbanned")
        .setDescription(`User unbanned by ${data.staffMember}`)
        .addFields([{ name: "User", value: data.username, inline: false }]);
      break;

    case "staff_added":
      embed
        .setTitle("⭐ Staff Added")
        .setDescription(`New staff member added by ${data.staffMember}`)
        .addFields([{ name: "User", value: data.username, inline: false }]);
      break;

    case "staff_removed":
      embed
        .setTitle("👤 Staff Removed")
        .setDescription(`Staff member removed by ${data.staffMember}`)
        .addFields([{ name: "User", value: data.username, inline: false }]);
      break;

    case "product_created":
      embed
        .setTitle("📦 Product Created")
        .setDescription(`New product created by ${data.username}`)
        .addFields([
          { name: "Product Name", value: data.productName, inline: false },
        ]);
      break;

    case "product_deleted":
      embed
        .setTitle("🗑️ Product Deleted")
        .setDescription(`Product deleted by ${data.username}`)
        .addFields([
          { name: "Product Name", value: data.productName, inline: false },
        ]);
      break;
    case "license_verify_success":
      embed
        .setTitle("✅ License Verified")
        .setDescription("Successful license verification")
        .addFields([
          { name: 'Owner', value: data.username, inline: false },
          { name: "Product", value: data.product, inline: false },
          { name: "License Key", value: `||${data.key}||`, inline: false },
          { name: "HWID", value: `||${data.hwid}||`, inline: false },
        ]);
      break;

    case "license_verify_failed":
      embed
        .setTitle("❌ Verification Failed")
        .setDescription(`License verification failed: ${data.reason}`)
        .addFields([
          { name: 'Owner', value: data.username, inline: false },
          { name: "Product", value: data.product, inline: false },
          { name: "License Key", value: `||${data.key}||`, inline: false },
        ]);
      break;

    case "license_hwid_bound":
      embed
        .setTitle("🔒 HWID Bound")
        .setDescription("License bound to new HWID")
        .addFields([
          { name: 'Owner', value: data.username, inline: false },
          { name: "Product", value: data.product, inline: false },
          { name: "License Key", value: `||${data.key}||`, inline: false },
          { name: "HWID", value: `||${data.hwid}||`, inline: false },
        ]);
      break;
  }

  channel.send({ embeds: [embed] });
};

module.exports = { sendLog };
